控制机器人并接收机器人数据
=============================

.. note:: 该文档主要描述了Bubble内部的通讯接口实现，关于上下位通讯串口协议及配置，请参见 ``木鸢通讯协议``


**Goal:** 通过Bubble控制机器人运动，并能得到当前机器人得状态信息


1 控制机器人运动
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
下面的例子展示了每隔0.5s使机器人云台相对于自身位置偏移0.01弧度

1.1 编写代码
~~~~~~~~~~~~~~~~~~~~~
.. tabs::
   .. group-tab:: Python

      .. code-block:: python
         :linenos:

         import rclpy
         from rclpy.node import Node

         from rmctrl_msgs.msg import Gimbal

         class MinimalPublisher(Node):
            def __init__(self):
               super().__init__('minimal_publisher')
               self.gimbal_pub = self.create_publisher(Gimbal, '/core/gimbal_api', 10)
               self.timer = self.create_timer(0.5, self.timer_callback)

            def timer_callback(self):
               gimbal_msg = Gimbal()
               gimbal_msg.mode = 1
               gimbal_msg.header.stamp = self.get_clock().now().to_msg()
               gimbal_msg.yaw = 0.01
               gimbal_msg.pitch = 0.
               gimbal_msg.roll = 0.
               self.gimbal_pub.publish(gimbal_msg)


         def main(args=None):
            rclpy.init(args=args)
            minimal_publisher = MinimalPublisher()
            rclpy.spin(minimal_publisher)
            minimal_publisher.destroy_node()
            rclpy.shutdown()

         if __name__ == '__main__':
            main()


   .. group-tab:: C++

      .. code-block:: C++

         // TODO

1.2 解释代码
~~~~~~~~~~~~~~~~~~~~~
首先引入了云台控制信息对应的msg和ros依赖包：

.. code-block:: python

   import rclpy
   from rclpy.node import Node

   from rmctrl_msgs.msg import Gimbal


构建一个Node，该Node中包含一个timer，每隔0.5秒执行 ``timer_callback`` 函数：

.. code-block:: python

   class MinimalPublisher(Node):
      def __init__(self):
         super().__init__('minimal_publisher')
         self.gimbal_pub = self.create_publisher(Gimbal, '/core/gimbal_api', 10)
         self.timer = self.create_timer(0.5, self.timer_callback)

``timer_callback`` 函数中实例化了 ``Gimbal`` 类型的消息对象，依次在消息中填入需要发送的数值，并通过 ``gimbal_pub`` 发送至 ``/core/gimbal_api`` topic下：

.. code-block:: python

   def timer_callback(self):
      gimbal_msg = Gimbal()
      gimbal_msg.mode = 1
      gimbal_msg.header.stamp = self.get_clock().now().to_msg()
      gimbal_msg.yaw = 0.01
      gimbal_msg.pitch = 0.
      gimbal_msg.roll = 0.
      self.gimbal_pub.publish(gimbal_msg)



1.3 编译并运行代码
~~~~~~~~~~~~~~~~~~~~~
打开一个终端编译并运行当前节点

.. code-block:: console

   colcon build --packages-select YOUR_PKG
   . install/setup.bash
   ros2 run YOUR_PKG YOUR_EXEC

在另一个终端中打开BCP core

.. code-block:: console

   . install/setup.bash
   ros2 launch bubble_protocol bcp_api_core_launch.py

如果你已经正确的配置了机器人，你应该看到机器人每隔0.5秒，云台偏转相应的角度



2 控制机器人运动
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
下面的例子展示了每隔0.5s使机器人云台相对于自身位置偏移0.01弧度