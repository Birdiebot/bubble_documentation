木鸢通讯协议
=============================

修改日志
-------------------
.. csv-table::
    :header: 日期,版本,维护者,修改记录
    :align: center
    :widths: 2,2,2,5

    2021.3.15,V1.0,Ligcox,首次发布
    2021.11.7,V2.0,Ligcox,针对的BCP for ROS2进行修改
    2022.8.15,V2.1,Ligcox,移植木鸢通讯手册pdf文档至reStructuredText

声明
-----------------------
木鸢通讯协议是一个针对RMU定制的上下位机通讯协议，
木鸢通讯协议包含在BTPDM、Bubble等开源项目中，鼓励在尊重著作权基础上对木鸢通讯协议进行使用、修改和二次发布。

1 前言
-----------------------
为了适应Robomaster赛场多种数据类型的传输，保证高效的通信效率，MCU与上位机之间的数据传输遵守BCP（Birdiebot Communication Protocol，Birdiebot通讯协议）格式。
BCP在确保通信高效、源码简单、可移植性高的基础上，实现数据正确性判断，有效避免数据传输过程中出现的错误数据的错误解析。
BCP提供对RMU机器人多种类型功能的操作，能够在不同架构下稳定运行，实现RMU赛场的数据传输和解析需求。

通过木鸢上位机和其他拓展工具，能够快速查看机器人状态和交互信息，仅需编写相应的下位机程序接收BCP数据，即可实现对不同种类机器人的控制。

2 通讯协议介绍
-----------------------
2.1 通讯帧基本格式
^^^^^^^^^^^^^^^^^^^^^^^

+---------+-------------+--------+----------+-----------+--------+---------+
| 帧头HEAD  | 目标地址D_ADDR  | 功能码ID  | 数据长度LEN  | 数据内容DATA  | 和校验SC  | 附加校验AC  |
+=========+=============+========+==========+===========+========+=========+
| 1       | 1           | 1      | 1        | 1         | 1      | 1       |
| 1       | 1           | 1      | 1        | 1         | 1      | 1       |
+---------+-------------+--------+----------+-----------+--------+---------+

====================        ====================        ============================
帧头HEAD                        目标地址D_ADDR                        A    and    B
====================        ====================        ============================
False        False        False
True            False        False
False        True            False
True            True            True
====================        ====================        ============================



.. math::


    \begin{table}[]
    \begin{tabular}{ccccccc}
    \rowcolor[HTML]{A5A5A5} 
    \begin{tabular}[c]{@{}c@{}}帧头\\ HEAD\end{tabular}  & \begin{tabular}[c]{@{}c@{}}目标地址\\ D\_ADDR\end{tabular}                                  & \begin{tabular}[c]{@{}c@{}}功能码\\ ID\end{tabular} & \begin{tabular}[c]{@{}c@{}}数据长度\\ LEN\end{tabular} & \begin{tabular}[c]{@{}c@{}}数据内容\\ DATA\end{tabular} & \begin{tabular}[c]{@{}c@{}}和校验\\ SC\end{tabular} & \begin{tabular}[c]{@{}c@{}}附加校验\\ AC\end{tabular} \\
    1                                                  & 1                                                                                       & 1                                                & 1                                                  & N                                                   & 1                                                & 1                                                 \\
    \begin{tabular}[c]{@{}c@{}}0xFF\\ 固定值\end{tabular} & \cellcolor[HTML]{A5A5A5}\begin{tabular}[c]{@{}c@{}}本帧数据发送的接收机器人\\ 参考硬件地址定义\end{tabular} & \cellcolor[HTML]{A5A5A5}机器人实现的目标位置               & \cellcolor[HTML]{A5A5A5}表示数据内容字段的长度                & \cellcolor[HTML]{A5A5A5}具体数据内容，n=数据长度               & \multicolumn{2}{c}{\cellcolor[HTML]{A5A5A5}计算方法附后}                                                  
    \end{tabular}
    \end{table}


DATA 数据内容中的数据，采用小端模式，低字节在前，高字节在后。
为了提高数据传输的效率，当有浮点数类型数据需要传输时，根据数据类型的特点，适当截取小数点后固定几位,将浮点数转化成整数类型进行传输，可缩短数据长度，并且避免浮点数传输时发生异常，解析成非法浮点数。类似数据会在协议中标注，如 A*100，就代表将数据 A 只保留两位小数，乘以100进行传输，下位机使用时将收到的数据除以100即可。

* 和校验 SUM CHECK 计算方法：从帧头0xFF字节开始，一直到 DATA 区结束，对每一字节进行累加操作，只取低 8 位
* 附加校验 ADD CHECK 计算方法： 计算和校验时，每进行一字节的加法运算，同时进行一次 SUM CHECK 的累加操作，只取低 8 位。
* 校验计算示例： 假设数据帧缓存为 data_buf 数组，0xFF存放于数组起始位置，那么data_buf[3]存放的是数据长度，校验程序如下：

.. code-block:: python

    def sumcheck_cal(self):
        sumcheck = 0
        addcheck = 0
        for i in [(k, v) for k, v in self.INFO.items()][:-3]:
            sumcheck += i[1]
            addcheck += sumcheck
        
        for i in self.INFO["DATA"]:
            sumcheck += i
            addcheck += sumcheck

        self.INFO["SUM_CHECK"] = int(sumcheck) & 0XFF
    self.INFO["ADD_CHECK"] = int(addcheck) & 0XFF

2.2 基本配置
^^^^^^^^^^^^^^^^^^^^^^^
2.2.1 快速开始
~~~~~~~~~~~~~~~~~~~~~~~~
TODO

2.2.2 COM设置
~~~~~~~~~~~~~~~~~~~~~~~~
在Manifold2-G Ubuntu18.04条件下，UART0在系统内核中对应的设备是ttyS0，UART1对应的设备是ttyTHS2。Manifold2-G推荐使用UART1作为BCP配置的COM口。
Jetson开发套件推荐使用40pin引脚的6、8口配置的ttyTHS0作为BCP配置的COM口

2.2.3 波特率配置
~~~~~~~~~~~~~~~~~~~~~~~~
在使用BCP时，需要将波特率调整为与MCU配置相同，默认为961200，但推荐不应小于115200。

3 数据帧介绍
-----------------------
3.1 心跳数据
^^^^^^^^^^^^^^^^^^^^^^^
为保证上位机与下位机正常通讯，在BCP开始工作时，会始终向下位机发送心跳数据。心跳数据默认每隔50ms发送，数据内容为0/1交替发送。
当下位机一段时间无法收到心跳数据时，说明MCU与上位机连接以断开，应执行相应操作。
